"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7979],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>f});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(i),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return i?n.createElement(f,r(r({ref:t},p),{},{components:i})):n.createElement(f,r({ref:t},p))}));function f(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,r=new Array(o);r[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,r[1]=l;for(var s=2;s<o;s++)r[s]=i[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},4772:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=i(7462),a=(i(7294),i(3905));const o={sidebar_position:2},r="Concepts",l={unversionedId:"overview/concepts",id:"overview/concepts",title:"Concepts",description:'In this section, we will explore in depth the concept of a digital twin as defined by the platform. We will detail the information it can contain, explain the idea of a "digital twin type", and discuss how the composition works.',source:"@site/docs/overview/concepts.md",sourceDirName:"overview",slug:"/overview/concepts",permalink:"/opentwins/docs/overview/concepts",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/overview/concepts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Purpose",permalink:"/opentwins/docs/overview/purpose"},next:{title:"Architecture",permalink:"/opentwins/docs/overview/architecture"}},c={},s=[{value:"Digital twin definition",id:"digital-twin-definition",level:3},{value:"Digital twin content",id:"digital-twin-content",level:3},{value:"Digital twin type",id:"digital-twin-type",level:3},{value:"Digital twins composition",id:"digital-twins-composition",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...i}=e;return(0,a.kt)(d,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"concepts"},"Concepts"),(0,a.kt)("p",null,'In this section, we will explore in depth the concept of a digital twin as defined by the platform. We will detail the information it can contain, explain the idea of a "digital twin type", and discuss how the composition works.'),(0,a.kt)("h3",{id:"digital-twin-definition"},"Digital twin definition"),(0,a.kt)("p",null,"In the platform, ",(0,a.kt)("strong",{parentName:"p"},"a digital twin is defined as a replica of a real entity"),", whether tangible or not. This replica can be considered as an enhancement to monitoring the entity because, although it is not strictly necessary to be classified as a digital twin, it is beneficial to connect the real data of the entity with those generated by means of mathematical simulations or artificial intelligence. In this way, ",(0,a.kt)("strong",{parentName:"p"},"the digital twin becomes a central point that integrates all available sources of information on the entity"),", facilitating a unified, fast and effective query that promotes decision-making and, therefore, the optimization of the real entity."),(0,a.kt)("h3",{id:"digital-twin-content"},"Digital twin content"),(0,a.kt)("p",null,"A digital twin is composed of static and dynamic data. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Static data.")," Information relevant to the digital twin that is expected to remain constant, such as the model, the date of acquisition or the location of the machine we are replicating. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Dynamic data.")," Data that changes over time and that we will record in time series, such as the position of a mobile robot or the values measured by a sensor."))),(0,a.kt)("p",null,"For example, consider a DHT22 temperature and humidity sensor. Its digital twin, represented in JSON format following the ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/basic-thing.html"},"schema provided by Eclipse Ditto"),", would look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "policyId": "example:DHT22",\n  "attributes": {\n    "location": "Spain"\n  },\n  "features": {\n    "temperature": {\n      "properties": {\n        "value": null\n      }\n    },\n    "humidity": {\n      "properties": {\n        "value": null\n      }\n    }\n  }\n}\n')),(0,a.kt)("h3",{id:"digital-twin-type"},"Digital twin type"),(0,a.kt)("h3",{id:"digital-twins-composition"},"Digital twins composition"))}u.isMDXComponent=!0}}]);