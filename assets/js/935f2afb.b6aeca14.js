"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/opentwins/docs/intro","docId":"intro"},{"type":"link","label":"Architecture","href":"/opentwins/docs/architecture","docId":"architecture"},{"type":"category","label":"Installation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Installation using Helm","href":"/opentwins/docs/installation/using-helm","docId":"installation/using-helm"},{"type":"category","label":"Manual way","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Ditto extended API","href":"/opentwins/docs/installation/manual-deploy/basic-platform","docId":"installation/manual-deploy/basic-platform"},{"type":"link","label":"Kafka-ML conection","href":"/opentwins/docs/installation/manual-deploy/ml-part","docId":"installation/manual-deploy/ml-part"},{"type":"link","label":"3D visualization using Unity","href":"/opentwins/docs/installation/manual-deploy/3d-part","docId":"installation/manual-deploy/3d-part"},{"type":"link","label":"Simulations","href":"/opentwins/docs/installation/manual-deploy/simulations-part","docId":"installation/manual-deploy/simulations-part"}],"href":"/opentwins/docs/installation/manual-deploy/"}],"href":"/opentwins/docs/category/installation"},{"type":"category","label":"Getting Started","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Raspberry example","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Sending data to Ditto","href":"/opentwins/docs/getting-started/raspberry-example/sending-data","docId":"getting-started/raspberry-example/sending-data"}],"href":"/opentwins/docs/getting-started/raspberry-example/"},{"type":"link","label":"String and number example","href":"/opentwins/docs/getting-started/string-example","docId":"getting-started/string-example"},{"type":"link","label":"Bouncing ball example","href":"/opentwins/docs/getting-started/ball-example","docId":"getting-started/ball-example"}],"href":"/opentwins/docs/category/getting-started"},{"type":"category","label":"Advanced guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"add-3d-visualization","href":"/opentwins/docs/guides/add-3d-visualization","docId":"guides/add-3d-visualization"},{"type":"link","label":"connect-dt-with-real-devices","href":"/opentwins/docs/guides/connect-dt-with-real-devices","docId":"guides/connect-dt-with-real-devices"},{"type":"link","label":"Create Digital Twin scheme","href":"/opentwins/docs/guides/create-dt-scheme","docId":"guides/create-dt-scheme"}],"href":"/opentwins/docs/category/advanced-guides"}]},"docs":{"architecture":{"id":"architecture","title":"Architecture","description":"This platform is built around the Eclipse Ditto digital twin framework. The following image shows the current architecture of the platform, which is intended to be extended over time. Each of the colours represents components that serve a certain functionality. These components are mostly external projects to our organisation, although there are also certain components that have had to be created especially for the platform. The code and documentation for these can be found in their respective repositories, which are all linked in the components folder.","sidebar":"tutorialSidebar"},"getting-started/ball-example":{"id":"getting-started/ball-example","title":"Bouncing ball example","description":"","sidebar":"tutorialSidebar"},"getting-started/raspberry-example/raspberry-example":{"id":"getting-started/raspberry-example/raspberry-example","title":"Raspberry example","description":"Requirements","sidebar":"tutorialSidebar"},"getting-started/raspberry-example/sending-data":{"id":"getting-started/raspberry-example/sending-data","title":"Sending data to Ditto","description":"In this case we will use a Raspberry Pi 3B with Raspbian buster OS connected to a DHT22 temperature and humidity sensor.","sidebar":"tutorialSidebar"},"getting-started/string-example":{"id":"getting-started/string-example","title":"String and number example","description":"","sidebar":"tutorialSidebar"},"guides/add-3d-visualization":{"id":"guides/add-3d-visualization","title":"add-3d-visualization","description":"","sidebar":"tutorialSidebar"},"guides/connect-dt-with-real-devices":{"id":"guides/connect-dt-with-real-devices","title":"connect-dt-with-real-devices","description":"","sidebar":"tutorialSidebar"},"guides/create-dt-scheme":{"id":"guides/create-dt-scheme","title":"Create Digital Twin scheme","description":"","sidebar":"tutorialSidebar"},"installation/manual-deploy/3d-part":{"id":"installation/manual-deploy/3d-part","title":"3D visualization using Unity","description":"","sidebar":"tutorialSidebar"},"installation/manual-deploy/basic-platform":{"id":"installation/manual-deploy/basic-platform","title":"Ditto extended API","description":"","sidebar":"tutorialSidebar"},"installation/manual-deploy/index":{"id":"installation/manual-deploy/index","title":"Manual way","description":"This section will explain how to deploy the platform manually. Basically, you will have to deploy or install the different components and then connect them. The procedure explained below is the one followed to deploy them in Kubernetes using in most cases the Helm option, but any other installation in which all the components are correctly installed and there is some kind of network between them to be able to communicate can be used.","sidebar":"tutorialSidebar"},"installation/manual-deploy/ml-part":{"id":"installation/manual-deploy/ml-part","title":"Kafka-ML conection","description":"","sidebar":"tutorialSidebar"},"installation/manual-deploy/simulations-part":{"id":"installation/manual-deploy/simulations-part","title":"Simulations","description":"","sidebar":"tutorialSidebar"},"installation/using-helm":{"id":"installation/using-helm","title":"Installation using Helm","description":"Requirements","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"This platform has been designed to facilitate the development of digital twins and is characterised by the exclusive use of open source components. The aim is to achieve a platform that covers all the functionalities that a digital twin may require, from the most basic ones, such as simply checking its real-time state, to more advanced ones, such as the inclusion of predicted or simulated data or visualisation of 3D models of the twins.","sidebar":"tutorialSidebar"}}}')}}]);