"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5284],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(t),d=l,h=u["".concat(s,".").concat(d)]||u[d]||c[d]||r;return t?a.createElement(h,i(i({ref:n},m),{},{components:t})):a.createElement(h,i({ref:n},m))}));function h(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6688:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(7462),l=(t(7294),t(3905));const r={sidebar_position:1},i="Installation Guide",o={unversionedId:"fmi/installation",id:"fmi/installation",title:"Installation Guide",description:"The FMI simulation service is currently being tested, so please be patient, as soon as it is properly tested, the public image will be available on Docker Hub.",source:"@site/docs/fmi/installation.md",sourceDirName:"fmi",slug:"/fmi/installation",permalink:"/opentwins/docs/fmi/installation",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/fmi/installation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"FMI Simulation",permalink:"/opentwins/docs/category/fmi-simulation"},next:{title:"FMI Simulation concepts",permalink:"/opentwins/docs/fmi/concepts"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Method 1: Helm Installation (WIP)",id:"method-1-helm-installation-wip",level:2},{value:"Method 2: Manual Installation",id:"method-2-manual-installation",level:2},{value:"Step 1: Deploy the Kubernetes Deployment",id:"step-1-deploy-the-kubernetes-deployment",level:3},{value:"Step 2: Create a Kubernetes Service",id:"step-2-create-a-kubernetes-service",level:3},{value:"Step 3: Verify the installation",id:"step-3-verify-the-installation",level:3}],m={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,l.kt)(u,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"installation-guide"},"Installation Guide"),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"The FMI simulation service is currently being tested, so please be patient, as soon as it is properly tested, the public image will be available on Docker Hub.")),(0,l.kt)("p",null,"This guide explains how to install the component using two methods:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Helm")," (Work in Progress)"),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Manual Installation")," using Kubernetes manifests (Deployment and Service)")),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("p",null,"This guide asumes that you have OpenTwins already installed."),(0,l.kt)("p",null,"Before you begin, ensure you have the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Access to a Kubernetes cluster"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"kubectl")," installed and configured"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Helm")," (for Helm installation)")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"method-1-helm-installation-wip"},"Method 1: Helm Installation (WIP)"),(0,l.kt)("admonition",{type:"warning"},(0,l.kt)("p",{parentName:"admonition"},"This method is currently a Work in Progress (WIP) and may not be fully functional yet. We recomend using manual installation.")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Add the Helm repository")," (once available):"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add ertis https://ertis-research.github.io/Helm-charts/\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Update Helm repositories"),":"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo update\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Install the component"),":"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"helm install <release-name> <chart-name> --namespace <namespace>\n")))),(0,l.kt)("p",null,"For additional configuration options, refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://helm.sh/docs/"},"Helm documentation"),"."),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"method-2-manual-installation"},"Method 2: Manual Installation"),(0,l.kt)("p",null,"You can manually deploy the component by creating a Kubernetes Deployment resource and a Service."),(0,l.kt)("h3",{id:"step-1-deploy-the-kubernetes-deployment"},"Step 1: Deploy the Kubernetes Deployment"),(0,l.kt)("p",null,"Create a YAML file for the Deployment (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"deployment.yaml"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    name: opentwins-fmi-api\n  name: opentwins-fmi-api\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: pod-opentwins-fmi-api\n  template:\n    metadata:\n      labels:\n        name: pod-opentwins-fmi-api\n      name: opentwins-fmi-api\n    spec:\n      serviceAccountName: ot-agents\n      automountServiceAccountToken: true\n      containers:\n        - image: ertis/opentwins-fmi-simulator-api-v2:latest\n          name: opentwins-fmi-api\n          env:\n          - name: KUBE_NAMESPACE\n            value: \n          - name: INSIDE_CLUSTER\n            value: \n          - name: INFLUXDB_HOST\n            value: \n          - name: INFLUXDB_TOKEN\n            value: \n          - name: INFLUXDB_DB\n            value: \n          - name: MINIO_TOKEN\n            value: \n          - name: MINIO_URL\n            value: \n          - name: MINIO_A_KEY\n            value: \n          - name: MINIO_S_KEY\n            value: \n          - name: POSTGRE_HOST\n            value: \n          - name: POSTGRE_PORT\n            value: \n          - name: POSTGRE_DB\n            value: \n          - name: POSTGRE_USER\n            value: \n          - name: POSTGRE_PASSWORD\n            value: \n          - name: BROKER_TYPE\n            value: \n          - name: BROKER_IP\n            value: \n          - name: BROKER_PORT\n            value: \n          - name: BROKER_TOPIC\n            value: \n          - name: BROKER_USERNAME\n            value: \n          - name: BROKER_PASSWORD\n            value: \n          ports:\n            - containerPort: 8001\n          imagePullPolicy: Always\n")),(0,l.kt)("p",null,"Apply the Deployment using the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f deployment.yaml -n <namespace>\n")),(0,l.kt)("h3",{id:"step-2-create-a-kubernetes-service"},"Step 2: Create a Kubernetes Service"),(0,l.kt)("p",null,"Next, create a YAML file for the Service (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"service.yaml"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Service\nmetadata:\n  name: opentwins-fmi-api\nspec:\n  selector:\n    name: pod-opentwins-fmi-api\n  type: NodePort\n  ports:\n  - protocol: "TCP"\n    port: 8000\n    nodePort: <PORT>\n    targetPort: 8000\n\n')),(0,l.kt)("p",null,"Apply the Service configuration using the following command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f service.yaml -n <namespace>\n")),(0,l.kt)("h3",{id:"step-3-verify-the-installation"},"Step 3: Verify the installation"),(0,l.kt)("p",null,"After deploying both the deployment and the service, veryfy that everything is running correctly:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get deployments -n <namespace>\nkubectl get services -n <namespace>\n")),(0,l.kt)("p",null,"You should see your Deployment and Service listed, and the component should be ready for use."))}c.isMDXComponent=!0}}]);