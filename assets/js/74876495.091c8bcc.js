"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5049],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||o;return n?i.createElement(m,r(r({ref:t},p),{},{components:n})):i.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));n(4996),n(941);const o={sidebar_position:1},r="Quickstart",s={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Welcome to OpenTwins, a flexible platform adapted to your needs! Although OpenTwins offers extensive customization options, we understand the importance of simplicity for beginners. Therefore, let's embark on a short journey together, showing you the quickest route to deploy the platform and develop a functional digital twin.",source:"@site/docs/quickstart.mdx",sourceDirName:".",slug:"/quickstart",permalink:"/opentwins/docs/quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Overview",permalink:"/opentwins/docs/category/overview"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Deploy",id:"deploy",level:3},{value:"Create your first digital twin",id:"create-your-first-digital-twin",level:2},{value:"Design",id:"design",level:3},{value:"Definition",id:"definition",level:3},{value:"Create Car type",id:"create-car-type",level:4},{value:"Create Wheel type",id:"create-wheel-type",level:4},{value:"Create the digital twins",id:"create-the-digital-twins",level:4},{value:"Connection",id:"connection",level:3},{value:"Visualization",id:"visualization",level:3}],p={toc:c},d="wrapper";function h(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,i.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quickstart"},"Quickstart"),(0,a.kt)("p",null,"Welcome to OpenTwins, a flexible platform adapted to your needs! Although OpenTwins offers extensive customization options, we understand the importance of simplicity for beginners. Therefore, let's embark on a short journey together, showing you the quickest route to deploy the platform and develop a functional digital twin."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Please be sure you have the following utilities installed on your host machine:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.docker.com/"},"Docker")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/releases/download/"},"Kubernetes")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Helm")," v3")),(0,a.kt)("p",null,"If you don't have a Kubernetes cluster, you can set one up on local using ",(0,a.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/"},"minikube"),". For a smooth deployment experience, we suggest you use the following minimum configuration values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start --cpus 4 --disk-size 40gb --memory 8192\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl config use-context minikube\n")),(0,a.kt)("h3",{id:"deploy"},"Deploy"),(0,a.kt)("p",null,"The quickest way to deploy OpenTwins is ",(0,a.kt)("a",{parentName:"p",href:"https://helm.sh/docs/intro/using_helm/"},"using Helm"),"."),(0,a.kt)("p",null,"The following command adds the ERTIS repository where the OpenTwins helm chart is located."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add ertis https://ertis-research.github.io/Helm-charts/\n")),(0,a.kt)("p",null,"To deploy the platform with recommended functionality, use the command below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade --install opentwins ertis/OpenTwins -n opentwins --wait --dependency-update\n")),(0,a.kt)("p",null,"To modify the components to be deployed and connected during the installation, you can check the ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/installation/using-helm"},"installation via Helm"),"."),(0,a.kt)("h2",{id:"create-your-first-digital-twin"},"Create your first digital twin"),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(2979).Z,alt:"Create digital twins",style:{width:700,margin:40}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"A digital twin must be at least a synchronized replica of a real system or object"),". To create it, the first step involves understanding the purpose of the digital twin, designing its structure and defining its most relevant characteristics. Next, it is necessary to define this information in OpenTwins and then connect the data sources that will feed the model. Finally, it is necessary to represent the data in a way that is understandable to any user."),(0,a.kt)("p",null,"Optionally, other useful functionalities can be added to the digital twin. In OpenTwins, we offer the integration of AI/ML models, the addition of 3D models and the execution of FMI or containerized simulations. However, this tutorial will not cover these extra functionalities, so we recommend consulting their respective guides for more information."),(0,a.kt)("p",null,"Following these steps, we will use OpenTwins to develop the ",(0,a.kt)("strong",{parentName:"p"},"digital twin of a car"),". In this case, for simplicity, we will focus only on the speed and direction of the car's four wheels. In addition, we will record the GPS location of the vehicle for tracking."),(0,a.kt)("h3",{id:"design"},"Design"),(0,a.kt)("p",null,"Taking advantage of the platform's functionalities, we will create a ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/overview/concepts#digital-twins-composition"},"composite digital twin"),".\nFor this purpose, we will define ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/overview/concepts#digital-twin-type"},"types"),' "t_car" and "t_wheel", which will abstract information about the car and the wheel, respectively.\nThese types will be linked by a composition relation, which means that a car comprises four wheels. Once all this is set up, instantiating the car as a digital twin will automatically generate twins for all four wheels.\nIn this way, we can independently access the data for each wheel and easily add digital twins for other cars or other contexts.'),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(4347).Z,alt:"Create digital twins",style:{width:700}})),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The creation of ",(0,a.kt)("strong",{parentName:"p"},"types is not essential")," to create a digital twin, but ",(0,a.kt)("strong",{parentName:"p"},"it is recommended")," to facilitate future work. You can create digital twins directly without defining a type, just select the ",(0,a.kt)("em",{parentName:"p"},"from scratch")," option in the twin creation form.")),(0,a.kt)("h3",{id:"definition"},"Definition"),(0,a.kt)("h4",{id:"create-car-type"},"Create Car type"),(0,a.kt)("p",null,"First, we will create the car type. To do so, we navigate to the ",(0,a.kt)("em",{parentName:"p"},"Types")," section in the interface and click on the blue ",(0,a.kt)("em",{parentName:"p"},"Create new type")," button. In this form, we must fill in the ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/overview/concepts#digital-twin-content"},"digital twin information")," that will be common for all instances. This includes the name, description and image of the twin, along with the values it will store, in this case ",(0,a.kt)("strong",{parentName:"p"},"gps"),".\nWe will define this type within a namespace and assign it a name.\nThe combination of the namespace and the name will be referred to as the ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/basic-thing.html#thing-id"},"thingId"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Screenshots of the filled form"),(0,a.kt)("div",null,(0,a.kt)("center",null,(0,a.kt)("img",{src:n(9636).Z,alt:"Create type - Identification and type information"}),(0,a.kt)("img",{src:n(2748).Z,alt:"Create type - attributes and features"})))),(0,a.kt)("p",null,"The JSON generated in ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/basic-thing.html#model-specification"},"Ditto Thing")," model is shown to the right of the form, which in this case corresponds to the following JSON:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thingId": "example:t_car",\n    "policyId": "default:basic_policy",\n    "attributes": {\n        "name": "Car",\n        "description": "Digital twin example for quickstart",\n        "image": "https://images.pexels.com/photos/119435/pexels-photo-119435.jpeg"\n    },\n    "features": {\n        "gps": {\n            "properties": {\n                "value": null\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Click on the blue ",(0,a.kt)("em",{parentName:"p"},"Create type")," button to create the type. A message should appear indicating that the type has been successfully created. You can close this message and return to the main screen."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you have installed OpenTwins with Helm, you should have a basic policy. Currently, we do not take into account the restriction of access to digital twins by ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/basic-policy.html"},"policy"),", so we always use the same one. Still, using this functionality is possible with OpenTwins, although you must interact directly with Eclipse Ditto. "),(0,a.kt)("p",{parentName:"admonition"},"For more details see the ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/http-api-doc.html#/Policies"},"Eclipse Ditto documentation"),".")),(0,a.kt)("h4",{id:"create-wheel-type"},"Create Wheel type"),(0,a.kt)("p",null,"Next we will create the type for the wheels.\nIn the list of types, we will access the type of the car we have just created to see its information.\nHere we select the ",(0,a.kt)("strong",{parentName:"p"},"children tab")," and click on the ",(0,a.kt)("strong",{parentName:"p"},"create new type")," button.\nThis form is almost identical to the previous one, with the difference that we can directly specify the number of instances of this new type to be created when a ",(0,a.kt)("em",{parentName:"p"},"t_car")," type is instantiated.\nIn our example we will have to indicate a 4 in this section and fill in the rest of the form as before.\nThis type, in addition to its identification and basic information, will have as features the ",(0,a.kt)("strong",{parentName:"p"},"velocity")," and ",(0,a.kt)("strong",{parentName:"p"},"direction")," of the wheel."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Screenshots of the filled form"),(0,a.kt)("div",null,(0,a.kt)("center",null,(0,a.kt)("img",{src:n(8775).Z,alt:"Create type - Identification and type information"}),(0,a.kt)("img",{src:n(8226).Z,alt:"Create type - attributes and features"})))),(0,a.kt)("p",null,"In this case the JSON of the generated Ditto Thing is the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thingId": "example:t_wheel",\n    "policyId": "default:basic_policy",\n    "attributes": {\n        "name": "Wheel",\n        "description": "Digital twin example for quickstart",\n        "image": "https://images.pexels.com/photos/111766/pexels-photo-111766.jpeg"\n    },\n    "features": {\n        "velocity": {\n            "properties": {\n                "value": null\n            }\n        },\n        "direction": {\n            "properties": {\n                "value": null\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"After clicking the ",(0,a.kt)("strong",{parentName:"p"},"Create type")," button, a confirmation message will appear.\nIf we now navigate to the children tab of the ",(0,a.kt)("em",{parentName:"p"},"t_car")," type, it will show that the ",(0,a.kt)("em",{parentName:"p"},"t_wheel")," type is one of its children and will be instantiated four times."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(7390).Z,alt:"Children of car type"})),(0,a.kt)("h4",{id:"create-the-digital-twins"},"Create the digital twins"),(0,a.kt)("p",null,"All that remains is to instantiate the car type so that all the twins are created.\nTo do this, navigate to the ",(0,a.kt)("em",{parentName:"p"},"Twins")," section and click on ",(0,a.kt)("strong",{parentName:"p"},"Create a new twin"),".\nIn the form, specify the identification of the twin and select the ",(0,a.kt)("em",{parentName:"p"},"t_car")," type.\nAll data will be filled in automatically, though you can modify it if desired by activating the customization switch."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Screenshots of the filled form"),(0,a.kt)("div",null,(0,a.kt)("center",null,(0,a.kt)("img",{src:n(9726).Z,alt:"Create twin form"})))),(0,a.kt)("p",null,"After clicking on create twin, the 5 digital twins will be generated automatically. A successfull message will appear when the process is finished.\nIf we check the list of twins, we will see our twin example: car.\nBy clicking on it and accessing the children tab, we will find four twins corresponding to its wheels, each with the features specified in their respective type."),(0,a.kt)("h3",{id:"connection"},"Connection"),(0,a.kt)("h3",{id:"visualization"},"Visualization"))}h.isMDXComponent=!0},7390:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/children-car-afb301bc04e66adf657430149d186497.png"},2979:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-digital-twins-bd76130c9ab23c157cdfcd9dcb0fdc5b.png"},9726:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-twin-car-a9b18a2a05ffe4b0a6dc0c3936c2c654.png"},9636:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-type-car-1-83262c74d042b2f67b088012aff4f2f4.png"},2748:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-type-car-2-a21e3c1f407d74316e407ab8998d192e.png"},8775:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-type-wheel-1-510d4b9fc36964dbd300146a9a583039.png"},8226:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-type-wheel-2-839f10a61f723425f7e52e34ebbc0348.png"},4347:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/model-car-example-512468f12b81f00c7e402a2a222d83ba.jpg"}}]);