"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Quickstart","href":"/opentwins/docs/quickstart","docId":"quickstart"},{"type":"category","label":"Overview","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Purpose","href":"/opentwins/docs/overview/purpose","docId":"overview/purpose"},{"type":"link","label":"Concepts","href":"/opentwins/docs/overview/concepts","docId":"overview/concepts"},{"type":"link","label":"Architecture","href":"/opentwins/docs/overview/architecture","docId":"overview/architecture"}],"href":"/opentwins/docs/category/overview"},{"type":"category","label":"Installation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Requirements","href":"/opentwins/docs/installation/requirements","docId":"installation/requirements"},{"type":"link","label":"Helm","href":"/opentwins/docs/installation/using-helm","docId":"installation/using-helm"},{"type":"category","label":"Manual","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Core functionality","href":"/opentwins/docs/installation/manual-deploy/core","docId":"installation/manual-deploy/core"},{"type":"link","label":"Kafka-ML conection","href":"/opentwins/docs/installation/manual-deploy/ml-part","docId":"installation/manual-deploy/ml-part"},{"type":"link","label":"3D visualization using Unity","href":"/opentwins/docs/installation/manual-deploy/3d-part","docId":"installation/manual-deploy/3d-part"},{"type":"link","label":"Simulations","href":"/opentwins/docs/installation/manual-deploy/simulations-part","docId":"installation/manual-deploy/simulations-part"}],"href":"/opentwins/docs/category/manual"}],"href":"/opentwins/docs/category/installation"},{"type":"category","label":"Guides","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"add-3d-visualization","href":"/opentwins/docs/guides/add-3d-visualization","docId":"guides/add-3d-visualization"},{"type":"link","label":"connect-dt-with-real-devices","href":"/opentwins/docs/guides/connect-dt-with-real-devices","docId":"guides/connect-dt-with-real-devices"},{"type":"link","label":"Create Digital Twin scheme","href":"/opentwins/docs/guides/create-dt-scheme","docId":"guides/create-dt-scheme"}],"href":"/opentwins/docs/category/guides"},{"type":"category","label":"Examples","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Raspberry example","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Sending data to Ditto","href":"/opentwins/docs/examples/raspberry-example/sending-data","docId":"examples/raspberry-example/sending-data"}],"href":"/opentwins/docs/examples/raspberry-example/"},{"type":"link","label":"String and number example","href":"/opentwins/docs/examples/string-example","docId":"examples/string-example"},{"type":"link","label":"Bouncing ball example","href":"/opentwins/docs/examples/ball-example","docId":"examples/ball-example"}],"href":"/opentwins/docs/category/examples"}]},"docs":{"examples/ball-example":{"id":"examples/ball-example","title":"Bouncing ball example","description":"","sidebar":"tutorialSidebar"},"examples/raspberry-example/raspberry-example":{"id":"examples/raspberry-example/raspberry-example","title":"Raspberry example","description":"Requirements","sidebar":"tutorialSidebar"},"examples/raspberry-example/sending-data":{"id":"examples/raspberry-example/sending-data","title":"Sending data to Ditto","description":"In this case we will use a Raspberry Pi 3B with Raspbian buster OS connected to a DHT22 temperature and humidity sensor.","sidebar":"tutorialSidebar"},"examples/string-example":{"id":"examples/string-example","title":"String and number example","description":"","sidebar":"tutorialSidebar"},"guides/add-3d-visualization":{"id":"guides/add-3d-visualization","title":"add-3d-visualization","description":"","sidebar":"tutorialSidebar"},"guides/connect-dt-with-real-devices":{"id":"guides/connect-dt-with-real-devices","title":"connect-dt-with-real-devices","description":"","sidebar":"tutorialSidebar"},"guides/create-dt-scheme":{"id":"guides/create-dt-scheme","title":"Create Digital Twin scheme","description":"","sidebar":"tutorialSidebar"},"installation/manual-deploy/3d-part":{"id":"installation/manual-deploy/3d-part","title":"3D visualization using Unity","description":"","sidebar":"tutorialSidebar"},"installation/manual-deploy/core":{"id":"installation/manual-deploy/core","title":"Core functionality","description":"This section will explain how to deploy the platform manually. Basically, you will have to deploy or install the different components and then connect them. The procedure explained below is the one followed to deploy them in Kubernetes using in most cases the Helm option, but any other installation in which all the components are correctly installed and there is some kind of network between them to be able to communicate can be used.","sidebar":"tutorialSidebar"},"installation/manual-deploy/ml-part":{"id":"installation/manual-deploy/ml-part","title":"Kafka-ML conection","description":"","sidebar":"tutorialSidebar"},"installation/manual-deploy/simulations-part":{"id":"installation/manual-deploy/simulations-part","title":"Simulations","description":"","sidebar":"tutorialSidebar"},"installation/requirements":{"id":"installation/requirements","title":"Requirements","description":"This page lists both software and hardware requirements for using opentwins","sidebar":"tutorialSidebar"},"installation/using-helm":{"id":"installation/using-helm","title":"Helm","description":"Installation","sidebar":"tutorialSidebar"},"overview/architecture":{"id":"overview/architecture","title":"Architecture","description":"OpenTwins is built on a microservices architecture, designed to enhance scalability, flexibility and efficiency in the development, extension, deployment and maintenance of the platform. All the components that make up this architecture are encapsulated in Docker containers, ideally managed through Kubernetes, which ensures efficient portability and management.","sidebar":"tutorialSidebar"},"overview/concepts":{"id":"overview/concepts","title":"Concepts","description":"In this section, we will explore in depth the concept of a digital twin as defined by the platform. We will detail the information it can contain, explain the idea of a \\"digital twin type\\", and discuss how the composition works.","sidebar":"tutorialSidebar"},"overview/purpose":{"id":"overview/purpose","title":"Purpose","description":"This platform has been designed to facilitate the development of digital twins and is characterised by the exclusive use of open source components. The aim is to achieve a platform that covers all the functionalities that a digital twin may require, from the most basic ones, such as simply checking its real-time state, to more advanced ones, such as the inclusion of predicted or simulated data or visualisation of 3D models of the twins.","sidebar":"tutorialSidebar"},"quickstart":{"id":"quickstart","title":"Quickstart","description":"Welcome to OpenTwins, a flexible platform adapted to your needs! Although OpenTwins offers extensive customization options, we understand the importance of simplicity for beginners. Therefore, let\'s embark on a short journey together, showing you the quickest route to deploy the platform and develop a simple, functional digital twin.","sidebar":"tutorialSidebar"}}}')}}]);