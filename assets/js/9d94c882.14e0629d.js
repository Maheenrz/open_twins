"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3366],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=o,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),o=n(6010);const i={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i.tabItem,r),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(7462),o=n(7294),i=n(6010),r=n(2389),s=n(7392),l=n(7094),c=n(2466);const p={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function m(e){const{lazy:t,block:n,defaultValue:r,values:m,groupId:u,className:d}=e,h=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,s.l)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===r?r:r??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:v}=(0,l.U)(),[y,k]=(0,o.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:_}=(0,c.o5)();if(null!=u){const e=w[u];null!=e&&e!==y&&f.some((t=>t.value===e))&&k(e)}const N=e=>{const t=e.currentTarget,n=T.indexOf(t),a=f[n].value;a!==y&&(_(t),k(a),null!=u&&v(u,String(a)))},x=e=>{let t=null;switch(e.key){case"Enter":N(e);break;case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;t=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;t=T[n]??T[T.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,i.Z)("tabs-container",p.tabList)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},d)},f.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>T.push(e),onKeyDown:x,onClick:N},r,{className:(0,i.Z)("tabs__item",p.tabItem,r?.className,{"tabs__item--active":y===t})}),n??t)}))),t?(0,o.cloneElement)(h.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function u(e){const t=(0,r.Z)();return o.createElement(m,(0,a.Z)({key:String(t)},e))}},4119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var a=n(7462),o=(n(7294),n(3905)),i=n(5488),r=n(5162);const s={sidebar_position:1},l="String and number",c={unversionedId:"guides/examples/string-example",id:"guides/examples/string-example",title:"String and number",description:"This is a example of creating a ONE way digital twin for monitoring a production line where we want to send the consumption and status of each of the components of the system. In this case, the stored information will be a string and a number, both of them have a timestamp asociated.",source:"@site/docs/guides/examples/string-example.mdx",sourceDirName:"guides/examples",slug:"/guides/examples/string-example",permalink:"/opentwins/docs/guides/examples/string-example",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/examples/string-example.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/opentwins/docs/category/examples"},next:{title:"Raspberry Pi",permalink:"/opentwins/docs/category/raspberry-pi"}},p={},m=[{value:"1. Creation of type machine.",id:"1-creation-of-type-machine",level:2},{value:"2. Creation of general twin.",id:"2-creation-of-general-twin",level:2},{value:"2.1. Creation of the child twin.",id:"21-creation-of-the-child-twin",level:3},{value:"3. Creating the schemma of the message.",id:"3-creating-the-schemma-of-the-message",level:2},{value:"4. Sending the data.",id:"4-sending-the-data",level:2}],u={toc:m},d="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"string-and-number"},"String and number"),(0,o.kt)("p",null,"This is a example of creating a ONE way digital twin for monitoring a production line where we want to send the consumption and status of each of the components of the system. In this case, the stored information will be a string and a number, both of them have a timestamp asociated."),(0,o.kt)("p",null,"This tutorial will have the following structure covering the creation using the Grafana plugin:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Creation of type machine."),(0,o.kt)("li",{parentName:"ol"},"Creation of general twin."),(0,o.kt)("li",{parentName:"ol"},"Creating the schemma of the message."),(0,o.kt)("li",{parentName:"ol"},"Sending the data.")),(0,o.kt)("h2",{id:"1-creation-of-type-machine"},"1. Creation of type machine."),(0,o.kt)("p",null,"As explained in the ",(0,o.kt)("a",{parentName:"p",href:"/opentwins/docs/guides/definition/type-creation"},"Create a type"),", we will create a type called machine with the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thingId": "productionline:machinetype",\n    "policyId": "default:basic_policy",\n    "attributes": {\n        "name": "Machine definition"\n    },\n    "features": {\n        "state": {\n            "properties": {\n                "value": null\n            }\n        },\n        "consumption": {\n            "properties": {\n                "value": null\n            }\n        }\n    }\n}\n')),(0,o.kt)("h2",{id:"2-creation-of-general-twin"},"2. Creation of general twin."),(0,o.kt)("p",null,"As explained in the ",(0,o.kt)("a",{parentName:"p",href:"/opentwins/docs/guides/definition/dt-schema-creation"},"Create a thing"),", we will create a thing called productionline with the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thingId": "productionline:productionline",\n    "policyId": "default:basic_policy",\n    "attributes": {\n        "name": "Production line"\n    },\n    "features": {}\n}\n')),(0,o.kt)("h3",{id:"21-creation-of-the-child-twin"},"2.1. Creation of the child twin."),(0,o.kt)("p",null,"As explained in the concept of Child twin, we will create a child twin called robotic_arm_1 with the following structure, using the existing type that we created in the previous step:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thingId": "productionline:robotic_arm_1",\n    "policyId": "default:basic_policy",\n    "attributes": {\n        "name": "Machine definition",\n        "type": "productionline:machinetype"\n    },\n    "features": {\n        "state": {\n            "properties": {\n                "value": null\n            }\n        },\n        "consumption": {\n            "properties": {\n                "value": null\n            }\n        }\n    }\n}\n')),(0,o.kt)("h2",{id:"3-creating-the-schemma-of-the-message"},"3. Creating the schemma of the message."),(0,o.kt)("p",null,"Sending the data to the digital twin is done using two methods:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using ",(0,o.kt)("a",{parentName:"li",href:"https://eclipse.dev/ditto/protocol-overview.html"},"Ditto Protocol"),"."),(0,o.kt)("li",{parentName:"ul"},"Using ",(0,o.kt)("a",{parentName:"li",href:"https://eclipse.dev/ditto/connectivity-mapping.html"},"Using JavaScript Mapping"),".")),(0,o.kt)(i.Z,{className:"unique-tabs",defaultValue:"dittop",values:[{label:"Using Ditto Protocol",value:"dittop"},{label:"Using JavaScript Mapping",value:"jsmap"}],mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"dittop",mdxType:"TabItem"},(0,o.kt)("p",null,"Although the Ditto protocol is the most efficient way to send the data, as it is the native protocol of Eclipse Ditto, it may not be the most convenient way as it requires a specific format.\nFor this example, we will use MQTT as the transport protocol."),(0,o.kt)("p",null,"Following the Ditto protocol, the message will be as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "topic": "productionline/robotis_arm_1/things/twin/commands/merge",\n    "headers": {\n        "content-type": "application/merge-patch+json"\n    },\n    "path": "/features",\n    "value": {\n        "robotic_arm_1_state": {\n            "properties": {\n                "value": "State",\n                "time": "Today\'s timestamp"\n            }\n        },\n        "robotic_arm_1_consumption": {\n            "properties": {\n                "value": "Arm consumption",\n                "time": "Today\'s timestamp"\n            }\n        }\n    }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The topic contains information about the contents of the payload; the affected Thing (namespace and Thing ID), the type of operation (command/event, create/retrieve/modify/delete)"),(0,o.kt)("li",{parentName:"ul"},"The headers are the part where we define the way this message interacts with Eclipse Ditto."),(0,o.kt)("li",{parentName:"ul"},"The path is the part of the thing that is affected by this message. "),(0,o.kt)("li",{parentName:"ul"},"Value is the data that we want to send to the digital twin.")),(0,o.kt)("p",null,"This message will be sent to the MQTT broker so that it can be read by Eclipse Ditto and therefore the digital twin.")),(0,o.kt)(r.Z,{value:"jsmap",mdxType:"TabItem"},(0,o.kt)("p",null,"The JavaScript mapping is a more flexible way to send the data, as it allows you recieve data in any format. However, it is less efficient than the Ditto protocol, as it requires more processing."),(0,o.kt)("p",null,"Suppose that our machine send the data in the following format:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "robotic_arm_1": {\n        "state": "State",\n        "time": "Today\'s timestamp",\n        "consumption": "Arm consumption"\n    }\n}\n')),(0,o.kt)("p",null,"Eclipse Ditto will not recognize this format, so we need to use a JavaScript mapping to convert it to the Ditto protocol format. The mapping will be as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfunction mapToDittoProtocolMsg(headers, textPayload, bytePayload, contentType) { \n    const jsonData = JSON.parse(textPayload);\n    const jsonData2 = jsonData['robotic_arm_1'];\n    const consumption = jsonData2['consumption']; \n    const state = jsonData2['state'];\n    headers = Object.assign(headers, { 'Content-Type': 'application/merge-patch+json' });\n\n    const features = { \n        state: { \n            properties: { \n                value: state, \n                time: Date.now()\n            } \n        }, \n        consumption: { \n            properties: { \n                value: consumption, \n                time: Date.now()\n            } \n        } \n    }; \n    return Ditto.buildDittoProtocolMsg('productionline', 'robotic_arm_1', 'things', 'twin', 'commands', 'merge', '/features', headers, features); \n};\n\n")),(0,o.kt)("p",null,"Using this JavaScript mapping when creating a connection, we can send the data in the format that we want and Eclipse Ditto will convert it to the Ditto protocol format."))),(0,o.kt)("h2",{id:"4-sending-the-data"},"4. Sending the data."),(0,o.kt)("p",null,"For this example, we will use a simple Python script to send the data to the MQTT broker. The script will be as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import paho.mqtt.client as mqtt\nimport json\nimport time\nimport datetime\nimport random\n\n# Define the MQTT broker address and topic\nbroker_address = "localhost"\nbroker_port = 1883\ntopic = "ditto/productionline/robotic_arm_1"\n# Create an MQTT client\nclient = mqtt.Client()\n# Connect to the MQTT broker\nclient.connect(broker_address, broker_port)\n# Start the MQTT client loop\nclient.loop_start()\n# Define the message payload\n\nwhile True:\n    message = {\n        "topic": "productionline/robotis_arm_1/things/twin/commands/merge",\n        "headers": {\n            "content-type": "application/merge-patch+json"\n        },\n        "path": "/features",\n        "value": {\n            "robotic_arm_1_state": {\n                "properties": {\n                    "value": "State",\n                    "time": datetime.datetime.now().isoformat()\n                }\n            },\n            "robotic_arm_1_consumption": {\n                "properties": {\n                    "value": random.randint(0, 100),\n                    "time": datetime.datetime.now().isoformat()\n                }\n            }\n        }\n    }\n    # Convert the message to JSON\n    message_json = json.dumps(message)\n    # Publish the message to the topic\n    client.publish(topic, message_json)\n    # Wait for a few seconds before sending the next message\n    time.sleep(5)\n# Stop the MQTT client loop\nclient.loop_stop()\n# Disconnect from the MQTT broker\nclient.disconnect()\n')),(0,o.kt)("p",null,"This script will send a message every 5 seconds with the state and consumption of the robotic arm. The state is a string and the consumption is a random number between 0 and 100. The timestamp is the current time in ISO format.\nThe message will be sent to the MQTT broker and Eclipse Ditto will receive it and update the digital twin accordingly."))}h.isMDXComponent=!0}}]);