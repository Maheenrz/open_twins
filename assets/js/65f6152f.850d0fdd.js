"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9601],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));t(4996),t(941);const a={sidebar_position:1,sidebar_label:"Concepts"},o="FMI Simulation concepts",s={unversionedId:"guides/fmi/concepts",id:"guides/fmi/concepts",title:"FMI Simulation concepts",description:"The FMI simulation service is currently being tested.",source:"@site/docs/guides/fmi/concepts.mdx",sourceDirName:"guides/fmi",slug:"/guides/fmi/concepts",permalink:"/opentwins/docs/guides/fmi/concepts",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guides/fmi/concepts.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Concepts"},sidebar:"tutorialSidebar",previous:{title:"FMI Simulation",permalink:"/opentwins/docs/category/fmi-simulation"},next:{title:"API Documentation",permalink:"/opentwins/docs/guides/fmi/API"}},l={},c=[{value:"Simulation schema",id:"simulation-schema",level:2},{value:"Simulation running schema",id:"simulation-running-schema",level:2}],u={toc:c},m="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fmi-simulation-concepts"},"FMI Simulation concepts"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"The FMI simulation service is currently being tested.")),(0,i.kt)("h2",{id:"simulation-schema"},"Simulation schema"),(0,i.kt)("p",null,"The schema is used to create simulation blueprints to store and create several simulation instances."),(0,i.kt)("p",null,"The schema can be create for a single FMU or several FMUs. The schema for a single FMU is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "id":"schema1",\n   "name":"Schema 1",\n   "description":"Sample schema",\n   "relatedTwins":[\n      "Twin1"\n   ],\n   "fmus":[\n        {\n            "id": "Controller",\n            "inputs": [\n                {"id": "u_s"},\n                {"id": "u_m"}\n            ],\n            "outputs": [\n                {"id": "y"}\n            ]\n        }\n    ]\n}\n')),(0,i.kt)("details",null,(0,i.kt)("summary",null,(0,i.kt)("b",null,"Schema for several FMUs")),(0,i.kt)("p",null,"The following schema is designed to be used with multiple FMUs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'{\n   "id":"schema1",\n   "name":"Schema 1",\n   "description":"Sample schema",\n   "relatedTwins":[\n      "Twin1"\n   ],\n   "fmus":[\n        {\n            "id": "Controller",\n            "inputs": [\n                {"id": "u_s"},\n                {"id": "u_m"}\n            ],\n            "outputs": [\n                {"id": "y"}\n            ]\n        },\n        {\n            "id": "Drivetrain",\n            "inputs": [\n                {"id": "tau"}\n            ],\n            "outputs": [\n                {"id": "w"}\n            ]\n        }\n    ],\n   "schema":[\n        {\n            "from": {"var": "w_ref"},\n            "to": {"id": "controller", "var": "u_s"}\n        },\n        {\n            "from": {"id": "drivetrain", "var": "w"},\n            "to": {"id": "controller", "var": "u_m"}\n        },\n        {\n            "from": {"id": "controller", "var": "y"},\n            "to": {"id": "drivetrain", "var": "tau"}\n        },\n        {\n            "from": {"id": "drivetrain", "var": "w"},\n            "to": {"var": "w"}\n        }\n    ]\n}\n')),(0,i.kt)("p",null,"This will work properly, although hovering over",(0,i.kt)("inlineCode",{parentName:"p"},"ApparentGreetProps"),"may be a little intimidating. You can reduce this boilerplate with the",(0,i.kt)("inlineCode",{parentName:"p"},"ComponentProps")," utility detailed below.")),(0,i.kt)("h2",{id:"simulation-running-schema"},"Simulation running schema"),(0,i.kt)("p",null,"Once you have a schema stored in the system, you can create a simulation instance using that schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n   "id":"Simulation1",\n   "name":"Simulation1",\n   "schemaId": "schema1",\n   "targetConnection":{\n      "BROKER_TYPE" : "mqtt",\n        "BROKER_IP" : "",\n        "BROKER_PORT" : "",\n        "BROKER_TOPIC" : "",\n        "BROKER_USERNAME" : "",\n        "BROKER_PASSWORD" : ""\n   },\n   "configuration":{\n      "SIMULATION_START_TIME":1,\n      "SIMULATION_END_TIME":7,\n      "SIMULATION_STEP_SIZE":1,\n      "SIMULATION_DELAY_WARNING": 1,\n      "SIMULATION_LAST_VALUE": true,\n      "SIMULATION_TYPESCHEDULE": "one-time"\n   },\n   "inputs":[],\n   "outputs": []\n}\n\n')),(0,i.kt)("p",null,"This schema is not different for one or several FMUs execution. It only contains information about execution."))}p.isMDXComponent=!0}}]);