"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4298],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),m=u(t),d=i,y=m["".concat(s,".").concat(d)]||m[d]||c[d]||l;return t?a.createElement(y,o(o({ref:n},p),{},{components:t})):a.createElement(y,o({ref:n},p))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[m]="string"==typeof e?e:i,o[1]=r;for(var u=2;u<l;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2354:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>u});var a=t(7462),i=(t(7294),t(3905));const l={sidebar_position:4},o="Simulations",r={unversionedId:"installation/manual/simulations",id:"installation/manual/simulations",title:"Simulations",description:"FMI simulations",source:"@site/docs/installation/manual/simulations.md",sourceDirName:"installation/manual",slug:"/installation/manual/simulations",permalink:"/opentwins/docs/installation/manual/simulations",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/installation/manual/simulations.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Machine Learning",permalink:"/opentwins/docs/installation/manual/machine-learning"},next:{title:"3D visualization",permalink:"/opentwins/docs/installation/manual/unity"}},s={},u=[{value:"FMI simulations",id:"fmi-simulations",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Deploy",id:"deploy",level:3},{value:"Connect",id:"connect",level:3},{value:"Custom simulations",id:"custom-simulations",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"Deploy",id:"deploy-1",level:3},{value:"Connect",id:"connect-1",level:3}],p={toc:u},m="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"simulations"},"Simulations"),(0,i.kt)("h2",{id:"fmi-simulations"},"FMI simulations"),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"The FMI simulation service is currently being tested. Please be patient, as soon as it is properly tested, the public image will be available on Docker Hub. If you want to test or use the service, you can find it in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ertis-research/opentwins-fmi-2.0"},"GitHub repository"),".")),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"Before you begin, ensure you have the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Access to a Kubernetes cluster"),(0,i.kt)("li",{parentName:"ul"},"OpenTwins with the components of the essential functionality (monitoring) already installed by Helm or manually"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"kubectl")," installed and configured")),(0,i.kt)("h3",{id:"deploy"},"Deploy"),(0,i.kt)("p",null,"You can manually deploy the component by creating a Kubernetes deployment resource and service."),(0,i.kt)("p",null,"Create a YAML file for the deployment with this content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="deployment.yaml"',title:'"deployment.yaml"'},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    name: opentwins-fmi-api\n  name: opentwins-fmi-api\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      name: pod-opentwins-fmi-api\n  template:\n    metadata:\n      labels:\n        name: pod-opentwins-fmi-api\n      name: opentwins-fmi-api\n    spec:\n      serviceAccountName: ot-agents\n      automountServiceAccountToken: true\n      containers:\n        - image: ertis/opentwins-fmi-simulator-api-v2:latest\n          name: opentwins-fmi-api\n          env:\n          - name: KUBE_NAMESPACE\n            value: \n          - name: INSIDE_CLUSTER\n            value: \n          - name: INFLUXDB_HOST\n            value: \n          - name: INFLUXDB_TOKEN\n            value: \n          - name: INFLUXDB_DB\n            value: \n          - name: MINIO_TOKEN\n            value: \n          - name: MINIO_URL\n            value: \n          - name: MINIO_A_KEY\n            value: \n          - name: MINIO_S_KEY\n            value: \n          - name: POSTGRE_HOST\n            value: \n          - name: POSTGRE_PORT\n            value: \n          - name: POSTGRE_DB\n            value: \n          - name: POSTGRE_USER\n            value: \n          - name: POSTGRE_PASSWORD\n            value: \n          - name: BROKER_TYPE\n            value: \n          - name: BROKER_IP\n            value: \n          - name: BROKER_PORT\n            value: \n          - name: BROKER_TOPIC\n            value: \n          - name: BROKER_USERNAME\n            value: \n          - name: BROKER_PASSWORD\n            value: \n          ports:\n            - containerPort: 8001\n          imagePullPolicy: Always\n")),(0,i.kt)("p",null,"Next, create a YAML file for the service with this content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="service.yaml"',title:'"service.yaml"'},'apiVersion: v1\nkind: Service\nmetadata:\n  name: opentwins-fmi-api\nspec:\n  selector:\n    name: pod-opentwins-fmi-api\n  type: NodePort\n  ports:\n  - protocol: "TCP"\n    port: 8000\n    nodePort: <PORT>\n    targetPort: 8000\n\n')),(0,i.kt)("p",null,"Apply the deployment and service using the following commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f deployment.yaml -n opentwins\nkubectl apply -f service.yaml -n opentwins\n")),(0,i.kt)("p",null,"To ",(0,i.kt)("strong",{parentName:"p"},"verify that everything is working correctly"),", use the following command to check if the new components are running and ready to use."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get all -n opentwins\n")),(0,i.kt)("h3",{id:"connect"},"Connect"),(0,i.kt)("h2",{id:"custom-simulations"},"Custom simulations"),(0,i.kt)("h3",{id:"prerequisites-1"},"Prerequisites"),(0,i.kt)("h3",{id:"deploy-1"},"Deploy"),(0,i.kt)("h3",{id:"connect-1"},"Connect"))}c.isMDXComponent=!0}}]);