"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5049],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||o;return n?i.createElement(m,r(r({ref:t},p),{},{components:n})):i.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4235:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));n(4996),n(941);const o={sidebar_position:1},r="Quickstart",s={unversionedId:"quickstart",id:"quickstart",title:"Quickstart",description:"Welcome to OpenTwins, a flexible platform adapted to your needs! Although OpenTwins offers extensive customization options, we understand the importance of simplicity for beginners. Therefore, let's embark on a short journey together, showing you the quickest route to deploy the platform and develop a functional digital twin.",source:"@site/docs/quickstart.mdx",sourceDirName:".",slug:"/quickstart",permalink:"/opentwins/docs/quickstart",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Overview",permalink:"/opentwins/docs/category/overview"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Deploy",id:"deploy",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Create your first digital twin",id:"create-your-first-digital-twin",level:2},{value:"Design",id:"design",level:3},{value:"Definition",id:"definition",level:3},{value:"Create Car type",id:"create-car-type",level:4},{value:"Create Wheel type",id:"create-wheel-type",level:4},{value:"Create the digital twins",id:"create-the-digital-twins",level:4},{value:"Connection",id:"connection",level:3},{value:"Visualization",id:"visualization",level:3}],p={toc:c},d="wrapper";function h(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,i.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quickstart"},"Quickstart"),(0,a.kt)("p",null,"Welcome to OpenTwins, a flexible platform adapted to your needs! Although OpenTwins offers extensive customization options, we understand the importance of simplicity for beginners. Therefore, let's embark on a short journey together, showing you the quickest route to deploy the platform and develop a functional digital twin."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"Please be sure you have the following utilities installed on your host machine:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.docker.com/"},"Docker")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/releases/download/"},"Kubernetes")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://helm.sh/docs/intro/install/"},"Helm")," v3")),(0,a.kt)("p",null,"If you don't have a Kubernetes cluster, you can set one up on local using ",(0,a.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/docs/"},"minikube"),". For a smooth deployment experience, we suggest you use the following minimum configuration values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start --cpus 4 --disk-size 40gb --memory 8192\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl config use-context minikube\n")),(0,a.kt)("h3",{id:"deploy"},"Deploy"),(0,a.kt)("p",null,"The quickest way to deploy OpenTwins is ",(0,a.kt)("a",{parentName:"p",href:"https://helm.sh/docs/intro/using_helm/"},"using Helm"),"."),(0,a.kt)("p",null,"The following command adds the ERTIS repository where the OpenTwins helm chart is located."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add ertis https://ertis-research.github.io/Helm-charts/\n")),(0,a.kt)("p",null,"To deploy the platform with recommended functionality, use the command below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"helm upgrade --install opentwins ertis/OpenTwins -n opentwins --wait --dependency-update\n")),(0,a.kt)("p",null,"To modify the components to be deployed and connected during the installation, you can check the ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/installation/using-helm"},"installation via Helm"),"."),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"If you've correctly installed OpenTwins Helm using the default settings, all connections should be established.\nThe final step involves ",(0,a.kt)("strong",{parentName:"p"},"configuring the platform interface plugin")," by adding the addresses of the Eclipse Ditto nginx service and the Ditto Extended API component into the plugin's configuration section.\nCheck the ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/installation/using-helm#configuration"},"installation documentation")," for more details."),(0,a.kt)("h2",{id:"create-your-first-digital-twin"},"Create your first digital twin"),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(2979).Z,alt:"Create digital twins",style:{width:700,margin:40}})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"A digital twin must be at least a synchronized replica of a real system or object"),". To create it, the first step involves understanding the purpose of the digital twin, designing its structure and defining its most relevant characteristics. Next, it is necessary to define this information in OpenTwins and then connect the data sources that will feed the model. Finally, it is necessary to represent the data in a way that is understandable to any user."),(0,a.kt)("p",null,"Optionally, other useful functionalities can be added to the digital twin. In OpenTwins, we offer the integration of AI/ML models, the addition of 3D models and the execution of FMI or containerized simulations. However, this tutorial will not cover these extra functionalities, so we recommend consulting their respective guides for more information."),(0,a.kt)("p",null,"Following these steps, we will use OpenTwins to develop the ",(0,a.kt)("strong",{parentName:"p"},"digital twin of a car"),". In this case, for simplicity, we will focus only on the speed and direction of the car's four wheels. In addition, we will record the GPS location of the vehicle for tracking."),(0,a.kt)("h3",{id:"design"},"Design"),(0,a.kt)("p",null,"Taking advantage of the platform's functionalities, we will create a ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/overview/concepts#digital-twins-composition"},"composite digital twin"),".\nFor this purpose, we will define ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/overview/concepts#digital-twin-type"},"types"),' "car" and "wheel", which will abstract information about the car and the wheel, respectively.\nThese types will be linked by a composition relation, which means that a car comprises four wheels. Once all this is set up, instantiating the car as a digital twin will automatically generate twins for all four wheels.\nIn this way, we can independently access the data for each wheel and easily add digital twins for other cars or other contexts.'),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(4347).Z,alt:"Create digital twins",style:{width:700}})),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The creation of ",(0,a.kt)("strong",{parentName:"p"},"types is not essential")," to create a digital twin, but ",(0,a.kt)("strong",{parentName:"p"},"it is recommended")," to facilitate future work. You can create digital twins directly without defining a type, just select the ",(0,a.kt)("em",{parentName:"p"},"from scratch")," option in the twin creation form.")),(0,a.kt)("h3",{id:"definition"},"Definition"),(0,a.kt)("h4",{id:"create-car-type"},"Create Car type"),(0,a.kt)("p",null,"First, we will create the car type. To do so, we navigate to the ",(0,a.kt)("em",{parentName:"p"},"Types")," section in the interface and click on the blue ",(0,a.kt)("em",{parentName:"p"},"Create new type")," button. In this form, we must fill in the ",(0,a.kt)("a",{parentName:"p",href:"/opentwins/docs/overview/concepts#digital-twin-content"},"digital twin information")," that will be common for all instances. This includes the name, description and image of the twin, along with the values it will store, in this case ",(0,a.kt)("strong",{parentName:"p"},"gps"),".\nWe will define this type within a namespace and assign it a name.\nThe combination of the namespace and the name will be referred to as the ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/basic-thing.html#thing-id"},"thingId"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Screenshots of the filled form"),(0,a.kt)("div",null,(0,a.kt)("center",null,(0,a.kt)("img",{src:n(9636).Z,alt:"Create type - Identification and type information"}),(0,a.kt)("img",{src:n(2748).Z,alt:"Create type - attributes and features"})))),(0,a.kt)("p",null,"The JSON generated in ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/basic-thing.html#model-specification"},"Ditto Thing")," model is shown to the right of the form, which in this case corresponds to the following JSON:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thingId": "example:car",\n    "policyId": "default:basic_policy",\n    "attributes": {\n        "name": "Car",\n        "description": "Digital twin example for quickstart",\n        "image": "https://images.pexels.com/photos/119435/pexels-photo-119435.jpeg"\n    },\n    "features": {\n        "gps": {\n            "properties": {\n                "value": null\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"Click on the blue ",(0,a.kt)("em",{parentName:"p"},"Create type")," button to create the type. A message should appear indicating that the type has been successfully created. You can close this message and return to the main screen."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you have installed OpenTwins with Helm, you should have a basic policy. Currently, we do not take into account the restriction of access to digital twins by ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/basic-policy.html"},"policy"),", so we always use the same one. Still, using this functionality is possible with OpenTwins, although you must interact directly with Eclipse Ditto. "),(0,a.kt)("p",{parentName:"admonition"},"For more details see the ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/http-api-doc.html#/Policies"},"Eclipse Ditto documentation"),".")),(0,a.kt)("h4",{id:"create-wheel-type"},"Create Wheel type"),(0,a.kt)("p",null,"Next we will create the type for the wheels.\nIn the list of types, we will access the type of the car we have just created to see its information.\nHere we select the ",(0,a.kt)("em",{parentName:"p"},"children")," tab and click on the ",(0,a.kt)("em",{parentName:"p"},"Create new type")," button.\nThis form is almost identical to the previous one, with the difference that we can directly specify the number of instances of this new type to be created when a car type is instantiated.\nIn our example we will have to indicate a 4 in this section and fill in the rest of the form as before.\nThis type, in addition to its identification and basic information, will have as features the ",(0,a.kt)("strong",{parentName:"p"},"velocity")," and ",(0,a.kt)("strong",{parentName:"p"},"direction")," of the wheel."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Screenshots of the filled form"),(0,a.kt)("div",null,(0,a.kt)("center",null,(0,a.kt)("img",{src:n(8775).Z,alt:"Create type - Identification and type information"}),(0,a.kt)("img",{src:n(8226).Z,alt:"Create type - attributes and features"})))),(0,a.kt)("p",null,"In this case the JSON of the generated Ditto Thing is the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "thingId": "example:wheel",\n    "policyId": "default:basic_policy",\n    "attributes": {\n        "name": "Wheel",\n        "description": "Digital twin example for quickstart",\n        "image": "https://images.pexels.com/photos/111766/pexels-photo-111766.jpeg"\n    },\n    "features": {\n        "velocity": {\n            "properties": {\n                "value": null\n            }\n        },\n        "direction": {\n            "properties": {\n                "value": null\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,"After clicking the ",(0,a.kt)("em",{parentName:"p"},"Create type")," button, a confirmation message will appear.\nIf we now navigate to the children tab of the car type, it will show that the wheel type is one of its children and will be instantiated four times."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(7390).Z,alt:"Children of car type",style:{width:600}})),(0,a.kt)("h4",{id:"create-the-digital-twins"},"Create the digital twins"),(0,a.kt)("p",null,"All that remains is to instantiate the car type so that all the twins are created.\nTo do this, navigate to the ",(0,a.kt)("em",{parentName:"p"},"Twins")," section and click on ",(0,a.kt)("em",{parentName:"p"},"Create a new twin"),".\nIn the form, specify the identification of the twin and select the car type.\nAll data will be filled in automatically, though you can modify it if desired by activating the customization switch."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Screenshots of the filled form"),(0,a.kt)("div",null,(0,a.kt)("center",null,(0,a.kt)("img",{src:n(9726).Z,alt:"Create twin form"})))),(0,a.kt)("p",null,"After clicking on ",(0,a.kt)("em",{parentName:"p"},"Create twin"),", the 5 digital twins will be generated automatically. A successfull message will appear when the process is finished.\nIf we check the list of twins, we will see our twin example:car.\nBy clicking on it and accessing the children tab, we will find four twins corresponding to its wheels, each with the features specified in their respective type."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(4008).Z,alt:"Children of car type"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The composite digital twin has already been defined.")),(0,a.kt)("h3",{id:"connection"},"Connection"),(0,a.kt)("p",null,"Once we have the digital twin defined, we need to feed it with data.\nEclipse Ditto requires data updates to be sent in ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/protocol-specification.html#dittoProtocolEnvelope"},"Ditto Protocol"),", which is a JSON format that indicates which parts of the digital twin we want to update and how to do it."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"It is also possible to connect Eclipse Ditto with messaging brokers that use other message formats.\nWe can add a ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/connectivity-mapping.html#javascript-examples"},"JavaScript mapping")," to the Eclipse Ditto connection, which will automatically transform the messages to the Ditto Protocol format.")),(0,a.kt)("p",null,"For Eclipse Ditto to collect the data, it is necessary to establish a ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/connectivity-overview.html"},"connection")," through MQTT, AMQP or Kafka, providing all the required information (address, port, credentials, etc.).\nIn this example, we will take advantage of the source connection that is automatically created with the installation of Helm (",(0,a.kt)("inlineCode",{parentName:"p"},"mosquitto-source-connection"),").\nThis connection pulls messages via MQTT from the Mosquitto deployed with the platform, using any subtopic within the telemetry topic (i.e. ",(0,a.kt)("inlineCode",{parentName:"p"},"telemetry/#"),").\nBy default, it does not include any JavaScript mapping, so we will send messages directly in Ditto Protocol.\nIf you need to use another connection, see the ",(0,a.kt)("a",{parentName:"p",href:"https://eclipse.dev/ditto/3.3/http-api-doc.html#/Connections"},"Eclipse Ditto documentation"),".  "),(0,a.kt)("p",null,"We will need to get the address of Mosquitto, which will depend on your installation."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"If you are using a cluster in your network"),", the address will be your cluster address and the port can be obtained by running ",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl get services")," and looking up the ",(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport"},(0,a.kt)("em",{parentName:"a"},"NodePort"))," of the Mosquitto service (default should be 30511)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"If you are using Minikube"),", you must expose the Mosquitto service in order to access it from your ",(0,a.kt)("em",{parentName:"li"},"localhost"),".\nTo do this, find the name of the service with ",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl get services")," and then run ",(0,a.kt)("inlineCode",{parentName:"li"},"minikube service <service-name> --url"),".\nThis will return a URL with the address and port to connect to.")),(0,a.kt)("p",null,"Since we don't have real data, we are going to create a Python script that generates random data from the car and its wheels every 5 seconds and sends it in Ditto Protocol to Mosquitto.\nTo run the script we will need to install the ",(0,a.kt)("a",{parentName:"p",href:"https://pypi.org/project/paho-mqtt/"},"Paho library for MQTT")," (typing_extensions is one of its dependencies)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"pip install paho-mqtt\npip install typing_extensions\n")),(0,a.kt)("p",null,"In the following script you must ",(0,a.kt)("strong",{parentName:"p"},"change the MQTT broker address and port")," to your own."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import paho.mqtt.client as mqtt\nimport random\nimport time\nimport json\n\n# Digital twin info\nnamespace = "example"\ncar_name = "mycar"\nwheels_name = "mycar:wheel_"\n\n# MQTT info\nbroker = "localhost"  # MQTT broker address\nport = 1883  # MQTT port\ntopic = "telemetry/"  # Topic where data will be published\n\n# MQTT connection\ndef on_connect(client, userdata, flags, rc):\n    if rc == 0:\n        print("Successful connection")\n    else:\n        print(f"Connection failed with code {rc}")\n\nclient = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\nclient.on_connect = on_connect\nclient.username_pw_set(username, password)\nclient.connect(broker, port, 60)\n\n# Data generator\ndef generate_wheel_data():\n    velocity = random.uniform(0, 100) # Generate random velocity (between 0 and 100 km/h)\n    direction = random.uniform(-45, 45) # Generate random direction (between -45 and 45 degrees)\n    return velocity, direction\n\ndef generate_gps_data():\n    latitude = random.uniform(-90.0, 90.0)\n    longitude = random.uniform(-180.0, 180.0)\n    return latitude, longitude\n\n# Ditto Protocol\ndef get_ditto_protocol_value_car(time, latitude, longitude):\n    return {\n        "gps" : {\n            "properties": {\n                "latitude": latitude,\n                "longitude": longitude,\n                "time": time\n            }\n        }\n    }\n\ndef get_ditto_protocol_value_wheel(time, velocity, direction):\n    return {\n        "velocity" : {\n            "properties": {\n                "value": velocity,\n                "time": time\n            }\n        },\n        "direction": {\n            "properties" : {\n                "value": direction,\n                "time" : time\n            }\n        }\n    }\n\ndef get_ditto_protocol_msg(name, value):\n    return {\n        "topic": "{}/{}/things/twin/commands/merge".format(namespace, name),\n        "headers": {\n            "content-type": "application/merge-patch+json"\n        },\n        "path": "/features",\n        "value": value\n    }\n\n# Send data\ntry:\n    while True:\n        t = round(time.time() * 1000) # Unix ms\n        \n        # Car twin\n        latitude, longitude = generate_gps_data()\n        msg = get_ditto_protocol_msg(car_name, get_ditto_protocol_value_car(t, latitude, longitude))\n        client.publish(topic + namespace + "/" + car_name, json.dumps(msg))\n        print(car_name + " data published")\n        \n        # Wheels twins\n        for i in range(1, 5):\n            name = wheels_name+str(i)\n            velocity, direction = generate_wheel_data()\n            msg = get_ditto_protocol_msg(name, get_ditto_protocol_value_wheel(t, velocity, direction))\n            client.publish(topic + namespace + "/" + name, json.dumps(msg))\n            print(name + " data published")\n        \n        time.sleep(5)\n        \nexcept KeyboardInterrupt:\n    client.disconnect()\n')),(0,a.kt)("p",null,"When you ",(0,a.kt)("strong",{parentName:"p"},"run the script"),", the data should start to be stored in the digital twins.\nYou can see if messages are being received by checking the information of the twins, where the values of their features will now have data."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(8606).Z,alt:"Children of car type",style:{width:700}})),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Are the twins not being updated?"),(0,a.kt)("div",null,(0,a.kt)("p",null,"You can check if messages arrive to Mosquitto by using ",(0,a.kt)("a",{parentName:"p",href:"https://mqtt-explorer.com/"},"MQTT explorer"),".\nIf they are sending correctly, you should see something like the following image:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"MQTT explorer",src:n(1845).Z,width:"1140",height:"628"})),(0,a.kt)("p",null,"And the messages being sent should be like these:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "topic": "example/mycar:wheel_2/things/twin/commands/merge",\n  "headers": {\n    "content-type": "application/merge-patch+json"\n  },\n  "path": "/features",\n  "value": {\n    "velocity": {\n      "properties": {\n        "value": 44.07908610511725,\n        "time": 1715943644787\n      }\n    },\n    "direction": {\n      "properties": {\n        "value": 37.92163063527694,\n        "time": 1715943644787\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"If the ",(0,a.kt)("strong",{parentName:"p"},"messages are not being received"),", debug the code to see what might be happening. Most likely you are not connecting correctly to Mosquitto (wrong address or port)."),(0,a.kt)("p",null,"If the ",(0,a.kt)("strong",{parentName:"p"},"messages are being received"),", then the problem is in the source connection to Eclipse Ditto. Check the connection logs with ",(0,a.kt)("inlineCode",{parentName:"p"},"http://<ditto-ip>:<ditto-port>/api/2/connections/mosquitto-source-connection/logs"),".\nThe Eclipse Ditto ip and port are obtained the same as mosquitto's, but since Ditto has more than one service, you have to query/expose the ",(0,a.kt)("strong",{parentName:"p"},"nginx")," one."))),(0,a.kt)("h3",{id:"visualization"},"Visualization"),(0,a.kt)("p",null,"Finally, we need to present the data in a user-friendly and meaningful way for the users of the digital twin.\nTo achieve this, we will create a new ",(0,a.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/dashboards/"},"dashboard")," in Grafana and add ",(0,a.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/panels-visualizations/"},"panels")," to display the relevant digital twin information."),(0,a.kt)("p",null,"The digital twin data is stored in an ",(0,a.kt)("a",{parentName:"p",href:"https://docs.influxdata.com/influxdb/v2/"},"InfluxDB2")," database, so we will have to query the information using ",(0,a.kt)("a",{parentName:"p",href:"https://docs.influxdata.com/flux/v0/"},"Flux")," language.\nIf OpenTwins has been installed via Helm with default values, the ",(0,a.kt)("a",{parentName:"p",href:"https://grafana.com/docs/grafana/latest/datasources/"},"connection")," between InfluxDB and Grafana should already be established, so it will only be necessary to select it as data source when creating a panel."),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(159).Z,alt:"Children of car type",style:{width:400}})),(0,a.kt)("p",null,"In this example, we will demonstrate a basic visualization. However, ",(0,a.kt)("strong",{parentName:"p"},"you can use any of Grafana's functionalities and plugins to customize it according to your specific objectives"),".\nWe will create four panels: one displaying the most recent GPS data of the car, another showing the evolution of the GPS data, a third panel indicating the current direction of all the wheels, and a fourth comparing the velocity of each wheel.\nThe result would look something like this:"),(0,a.kt)("center",null,(0,a.kt)("img",{src:n(589).Z,alt:"Grafana dashboard"})),(0,a.kt)("p",null,"For each of the four panels, we have selected the most convenient chart type, kept the default settings and added the related query in the Query section."),(0,a.kt)("p",null,"The panel displaying the ",(0,a.kt)("strong",{parentName:"p"},"current GPS")," data extracts the longitude and latitude information from the digital twin ",(0,a.kt)("em",{parentName:"p"},"example:mycar"),".\nIt renames the fields for proper display, retains the relevant fields, sorts the results by time, and keeps only the most recent entry."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import "strings"\nfrom(bucket: "opentwins")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r["_measurement"] == "mqtt_consumer")\n  |> filter(fn: (r) => r["thingId"] == "example:mycar")\n  |> filter(fn: (r) => r["_field"] == "value_gps_properties_latitude" or r["_field"] == "value_gps_properties_longitude")\n  |> map(fn: (r) => ({ r with _field: strings.replace(v: r["_field"], t: "value_gps_properties_", u: "", i: 2) }))\n  |> keep (columns: ["_value", "_field", "_time"])\n  |> sort(columns: ["_time"], desc: false)  \n  |> last()  \n')),(0,a.kt)("p",null,"The panel for show the ",(0,a.kt)("strong",{parentName:"p"},"GPS evolution")," also extracts the latitude and longitude data from the digital twin ",(0,a.kt)("em",{parentName:"p"},"example:mycar"),", but keeps all the entries instead of just the last one."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import "strings"\nfrom(bucket: "opentwins")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r["_measurement"] == "mqtt_consumer")\n  |> filter(fn: (r) => r["thingId"] == "example:mycar")\n  |> filter(fn: (r) => r["_field"] == "value_gps_properties_latitude" or r["_field"] == "value_gps_properties_longitude")\n  |> map(fn: (r) => ({ r with _field: strings.replace(v: r["_field"], t: "value_gps_properties_", u: "", i: 2) }))\n  |> keep (columns: ["_value", "_field", "_time"])\n')),(0,a.kt)("p",null,"The panel displaying the ",(0,a.kt)("strong",{parentName:"p"},"current direction of wheels")," extracts the direction data of the four twins corresponding to the wheels, identified by starting with ",(0,a.kt)("em",{parentName:"p"},"example:mycar:wheel_"),".\nIt modifies the identifiers of the twins for a more readable display and retains the most recent value based on time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import "strings"\nfrom(bucket: "opentwins")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r["_measurement"] == "mqtt_consumer")\n  |> filter(fn: (r) => strings.hasPrefix(v: r["thingId"], prefix: "example:mycar:wheel_"))\n  |> filter(fn: (r) => r["_field"] == "value_direction_properties_value")\n  |> map(fn: (r) => ({ r with thingId: strings.replace(v: r["thingId"], t: "example:mycar:", u: "", i: 2) }))\n  |> keep (columns: ["thingId", "_value", "_time"])\n  |> sort(columns: ["_time"], desc: false)  \n  |> last()\n')),(0,a.kt)("p",null,"Finally, the panel that makes a ",(0,a.kt)("strong",{parentName:"p"},"wheels velocity comparison")," is similar to the previous one, although extracting the velocity data from the 4 twins instead of the direction and keeping all the entries."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'import "strings"\nfrom(bucket: "opentwins")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r["_measurement"] == "mqtt_consumer")\n  |> filter(fn: (r) => strings.hasPrefix(v: r["thingId"], prefix: "example:mycar:wheel_"))\n  |> filter(fn: (r) => r["_field"] == "value_velocity_properties_value")\n  |> map(fn: (r) => ({ r with thingId: strings.replace(v: r["thingId"], t: "example:mycar:", u: "", i: 2) }))\n  |> keep (columns: ["thingId", "_value", "_time"])\n')),(0,a.kt)("p",null,"This satisfies the basic requirements to consider a system as a digital twin.\nHowever, to take full advantage of its capabilities, we recommend including other functionalities or additional data sources.\nThis will allow you to obtain a more complete and accurate view of the real system.\nYou can check our ",(0,a.kt)("a",{parentName:"p",href:"./category/guides"},"guides")," for more information"))}h.isMDXComponent=!0},4008:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/children-car-twin-ca2cf91c075a327581d6ba641943742c.png"},7390:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/children-car-d181addcc20bcf1a9a75715cf3353c15.png"},2979:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-digital-twins-bd76130c9ab23c157cdfcd9dcb0fdc5b.png"},9726:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-twin-car-4a9968f0a40982680599c72e2f6d3b23.png"},9636:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-type-car-1-83399364c854df3e8b229885140649ba.png"},2748:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-type-car-2-c0b3b0d20c5b4291c77340e8a685d0c6.png"},8775:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-type-wheel-1-d71b44232fb9dfeebc601958e43d19fd.png"},8226:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/create-type-wheel-2-01daddbffbb636b06904956113d446fc.png"},589:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/grafana-dashboard-d0dbd9d8646a93fa599ba324ce583338.png"},159:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/grafana-datasource-e1e06ed3137227fd650fb894928415db.png"},4347:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/model-car-example-2b119ad662f43ec5caa875a83d9d7b7c.jpg"},8606:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/wheel-data-30d7b695d58b99fcec8f817d5d5b45e1.png"},1845:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/mqtt-explorer-ebaae1985874581cb44c024060bef150.png"}}]);